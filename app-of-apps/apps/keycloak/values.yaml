keycloak:
  global:
    security:
      allowInsecureImages: true
    compatibility:
      openshift:
        adaptSecurityContext: auto
      omitEmptySeLinuxOptions: false

  kubeVersion: ""
  nameOverride: ""
  fullnameOverride: ""
  namespaceOverride: ""
  clusterDomain: cluster.local
  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity
  useHelmHooks: true
  usePasswordFiles: true
  image:
    registry: docker.io
    repository: keycloak/keycloak
    tag: 26.3.3
    digest: ""
    pullPolicy: IfNotPresent
    debug: false
  auth:
    adminUser: admin
    adminPassword: ""
  ## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy headers
  ##
  production: false
  tls:
    enabled: false
    usePemCerts: false
    autoGenerated:
      enabled: true
      engine: helm
      certManager:
        existingIssuer: ""
        existingIssuerKind: ""
        keySize: 2048
        keyAlgorithm: RSA
        duration: 2160h
        renewBefore: 360h
    existingSecret: ""
    certFilename: "tls.crt"
    certKeyFilename: "tls.key"
    keystoreFilename: "keycloak.keystore.jks"
    truststoreFilename: "keycloak.truststore.jks"
    keystorePassword: ""
    truststorePassword: ""
    passwordsSecret: ""
  trustedCertsExistingSecret: ""
  adminRealm: "master"
  proxyHeaders: ""
  hostnameStrict: false
  httpEnabled: false
  httpRelativePath: "/"
  cache:
    enabled: true
    stack: jdbc-ping
    configFile: "cache-ispn.xml"
    useHeadlessServiceWithAppVersion: false
  logging:
    output: default
    level: INFO
  configuration: ""
  existingConfigmap: ""
  extraStartupArgs: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  containerPorts:
    http: 8080
    https: 8443
    management: 9000
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  # resourcesPreset: "small"
  ## @param resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      cpu: 1
      memory: 1024Mi
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    periodSeconds: 1
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 10
    successThreshold: 1
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimitCount: 10
  minReadySeconds: 0
  automountServiceAccountToken: true
  podAntiAffinityPreset: soft
  podManagementPolicy: Parallel
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  dnsPolicy: ""
  enableServiceLinks: true
  service:
    type: ClusterIP
    http:
      enabled: true
    ports:
      http: 80
      https: 443
    nodePorts:
      http: ""
      https: ""
    externalTrafficPolicy: Cluster
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: ""
    hostname: keycloak.local
    ingressClassName: ""
    controller: default
    path: "{{ .Values.httpRelativePath }}"
    servicePort: http
    annotations: {}
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    tls: false
    selfSigned: false
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    addExternalClientAccess: true
    kubeAPIServerPorts: [443, 6443, 8443]
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  autoscaling:
    vpa:
      enabled: false
      updatePolicy:
        updateMode: Auto
    hpa:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPU: ""
      targetMemory: ""
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 120
          selectPolicy: Max
          policies: []
        scaleDown:
          stabilizationWindowSeconds: 300
          selectPolicy: Max
          policies:
            - type: Pods
              value: 1
              periodSeconds: 300

  metrics:
    enabled: false
    service:
      ports:
        metrics: 9000
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
    serviceMonitor:
      enabled: false
      namespace: ""
      honorLabels: false
    prometheusRule:
      enabled: false
      namespace: ""
  keycloakConfigCli:
    enabled: false
  defaultInitContainers:
    prepareWriteDirs:
      enabled: true
      containerSecurityContext:
        enabled: true
        seLinuxOptions: {}
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        privileged: false
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["ALL"]
        seccompProfile:
          type: "RuntimeDefault"
      resourcesPreset: "nano"
      resources: {}


  postgresql:
    enabled: true
    auth:
      postgresPassword: ""
      username: keycloak
      password: ""
      database: keycloak
      existingSecret: ""
      secretKeys:
        userPasswordKey: password
    architecture: standalone

    image:
      registry: docker.io
      repository: bitnamisecure/postgresql
      tag: latest
      digest: ""
  # externalDatabase:
  #   host: ""
  #   port: 5432
  #   user: keycloak
  #   database: keycloak
  #   schema: public
  #   password: ""
  #   existingSecret: ""
  #   existingSecretUserKey: ""
  #   existingSecretPasswordKey: ""
  #   annotations: {}
  #   extraParams: ""