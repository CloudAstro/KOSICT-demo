{{- range $appName, $appConfig := .Values.apps }}
{{- if $appConfig.enabled }}
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ $appName }}
  namespace: {{ $.Release.Namespace }}
spec:
  goTemplate: true
  goTemplateOptions:
    - missingkey=error
  syncPolicy:
    preserveResourcesOnDeletion: true
  generators:
    - list:
        elements:
          {{- range $envName, $envConfig := (omit $appConfig "enabled" "syncPolicy" "revisionHistoryLimit") }}
          - env: {{ $envName | quote }}
            {{- if $envConfig.helmValues }}
            helmValues:
              {{- range $name, $value := $envConfig.helmValues }}
              - name: {{ $name | quote }}
                value: {{ include "tpl-values" (dict "values" $value "context" $) | quote }}
              {{- end }}
            {{- else }}
            helmValues: []
            {{- end }}
          {{- end }}
  template:
    metadata:
      name: '{{ $appName }}-{{ `{{.env}}` }}'
      labels:
        app: {{ $appName | quote }}
        environment: '{{ `{{.env}}` }}'
      finalizers:
        - resources-finalizer.argocd.argoproj.io
    spec:
      project: {{ $appName | quote }}
      revisionHistoryLimit: {{ $appConfig.revisionHistoryLimit | default 3 }}
      sources:
        - repoURL: {{ $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $.Values.global.source.targetRevision | quote }}
          path: 'infra-charts/{{ $appName }}'
          helm:
            releaseName: {{ $appName | quote }}
            valueFiles:
              - values.yaml
              - {{ `$values/app-set/apps/` }}{{ $appName }}/{{ `{{.env}}` }}/values.yaml
        - repoURL: {{ $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $.Values.global.source.targetRevision | quote }}
          ref: values
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{ $appName }}-{{ `{{.env}}` }}'
      {{- if $appConfig.syncPolicy }}
      syncPolicy:
        {{- if $appConfig.syncPolicy.automated }}
        automated:
          prune: {{ $appConfig.syncPolicy.automated.prune | default true }}
          selfHeal: {{ $appConfig.syncPolicy.automated.selfHeal | default true }}
          allowEmpty: {{ $appConfig.syncPolicy.automated.allowEmpty | default true }}
        {{- end }}
        {{- if $appConfig.syncPolicy.syncOptions }}
        syncOptions:
          {{- toYaml $appConfig.syncPolicy.syncOptions | nindent 10 }}
        {{- end }}
        {{- if $appConfig.syncPolicy.retry }}
        retry:
          limit: {{ $appConfig.syncPolicy.retry.limit | default 5 }}
          {{- if $appConfig.syncPolicy.retry.backoff }}
          backoff:
            duration: {{ $appConfig.syncPolicy.retry.backoff.duration | default "5s" }}
            factor: {{ $appConfig.syncPolicy.retry.backoff.factor | default 2 }}
            maxDuration: {{ $appConfig.syncPolicy.retry.backoff.maxDuration | default "3m" }}
          {{- end }}
        {{- end }}
      {{- end }}
  templatePatch: |
    {{`{{- if .helmValues }}`}}
    spec:
      sources:
        - repoURL: {{ $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $.Values.global.source.targetRevision | quote }}
          path: 'infra-charts/{{ $appName }}'
          helm:
            releaseName: {{ $appName | quote }}
            valueFiles:
              - values.yaml
              - $values/app-set/apps/{{ $appName }}/{{`{{.env}}`}}/values.yaml
            parameters:
            {{`{{- range $param := .helmValues }}`}}
            - name: {{`{{ $param.name | quote }}`}}
              value: {{`{{ $param.value | quote }}`}}
              forceString: true
            {{`{{- end }}`}}
        - repoURL: {{ $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $.Values.global.source.targetRevision | quote }}
          ref: values
    {{`{{- end }}`}}

{{- end }}
{{- end }}
