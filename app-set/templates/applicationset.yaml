{{- /*
ArgoCD ApplicationSet Template
*/ -}}
{{- range $appName, $appConfig := .Values.apps }}
{{- if $appConfig.enabled }}
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ $appName }}
  namespace: {{ $.Release.Namespace }}
  {{- with $appConfig.labels }}
  labels:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  annotations:
    "helm.sh/resource-policy": keep
    {{- if $appConfig.annotations }}
    {{- toYaml $appConfig.annotations | nindent 4 }}
    {{- end }}
spec:
  goTemplate: true
  goTemplateOptions:
    - missingkey=zero
  
  syncPolicy:
    preserveResourcesOnDeletion: {{ $appConfig.preserveResourcesOnDeletion | default $.Values.global.preserveResourcesOnDeletion | default true }}
    {{- if $appConfig.applicationsSync }}
    applicationsSync: {{ $appConfig.applicationsSync }}
    {{- else if $.Values.global.applicationsSync }}
    applicationsSync: {{ $.Values.global.applicationsSync }}
    {{- else }}
    applicationsSync: create-update
    {{- end }}
  
  generators:
    - list:
        elements:
          {{- $excludeKeys := list "enabled" "syncPolicy" "applicationSyncPolicy" "revisionHistoryLimit" "labels" "annotations" "ignoreDifferences" "info" "namespaceLabels" "namespaceAnnotations" "project" "prune" "selfHeal" "allowEmpty" "createNamespace" "retry" "syncOptions" "disableAutoSync" "chartPath" "repoURL" "targetRevision" "releaseName" "skipCrds" "passCredentials" "additionalValueFiles" "values" "fileParameters" "ignoreMissingValueFiles" "valuesRepoURL" "valuesTargetRevision" "forceString" "preserveResourcesOnDeletion" "applicationsSync" "finalizers" }}
          {{- range $envName, $envConfig := $appConfig }}
          {{- if not (has $envName $excludeKeys) }}
          - env: {{ $envName | quote }}
            server: {{ $envConfig.server | default "https://kubernetes.default.svc" | quote }}
            namespace: {{ $envConfig.namespace | default (printf "%s-%s" $appName $envName) | quote }}
            {{- if $envConfig.helmValues }}
            helmValues:
              {{- range $name, $value := $envConfig.helmValues }}
              - name: {{ $name | quote }}
                value: {{ include "tpl-values" (dict "values" $value "context" $) | quote }}
              {{- end }}
            {{- else }}
            helmValues: []
            {{- end }}
          {{- end }}
          {{- end }}
  
  template:
    metadata:
      name: '{{ $appName }}-{{ `{{.env}}` }}'
      labels:
        app: {{ $appName | quote }}
        environment: '{{ `{{.env}}` }}'
        {{- if $appConfig.labels }}
        {{- range $key, $value := $appConfig.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      
      {{- if $appConfig.finalizers }}
      finalizers:
        {{- toYaml $appConfig.finalizers | nindent 8 }}
      {{- else }}
      finalizers:
        - resources-finalizer.argocd.argoproj.io
      {{- end }}
      
      annotations:
        argocd.argoproj.io/sync-options: Delete=false
        {{- if $appConfig.annotations }}
        {{- range $key, $value := $appConfig.annotations }}
        {{- if ne $key "argocd.argoproj.io/sync-options" }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
    
    spec:
      project: {{ $appConfig.project | default $.Values.global.projectName | default $appName }}
      revisionHistoryLimit: {{ $appConfig.revisionHistoryLimit | default 3 }}
      
      {{- if $appConfig.info }}
      info:
        {{- toYaml $appConfig.info | nindent 8 }}
      {{- end }}
      
      {{- if or $appConfig.ignoreDifferences $.Values.global.ignoreDifferences }}
      ignoreDifferences:
        {{- if $.Values.global.ignoreDifferences }}
        {{- toYaml $.Values.global.ignoreDifferences | nindent 8 }}
        {{- end }}
        {{- if $appConfig.ignoreDifferences }}
        {{- toYaml $appConfig.ignoreDifferences | nindent 8 }}
        {{- end }}
      {{- else }}
      ignoreDifferences:
        - group: apps
          kind: Deployment
          jqPathExpressions:
            - '.spec.template.spec.containers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
            - '.spec.template.spec.initContainers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
        - group: apps
          kind: StatefulSet
          jqPathExpressions:
            - '.spec.template.spec.containers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
            - '.spec.template.spec.initContainers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
        - group: apps
          kind: DaemonSet
          jqPathExpressions:
            - '.spec.template.spec.containers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
            - '.spec.template.spec.initContainers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
        - group: batch
          kind: Job
          jqPathExpressions:
            - '.spec.template.spec.containers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
            - '.spec.template.spec.initContainers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
        - group: batch
          kind: CronJob
          jqPathExpressions:
            - '.spec.jobTemplate.spec.template.spec.containers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
            - '.spec.jobTemplate.spec.template.spec.initContainers[].env[]? | select(.name | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
        - group: ""
          kind: Secret
          jqPathExpressions:
            - '.data | to_entries[]? | select(.key | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
            - '.stringData | to_entries[]? | select(.key | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
        - group: ""
          kind: ConfigMap
          jqPathExpressions:
            - '.data | to_entries[]? | select(.key | test("PASSWORD|PASS|SECRET|TOKEN|KEY|CREDENTIAL|AUTH|ACCESS|API"))'
      {{- end }}
      
      destination:
        server: '{{ `{{.server}}` }}'
        namespace: '{{ `{{.namespace}}` }}'
      
      {{- if $appConfig.applicationSyncPolicy }}
      syncPolicy:
        {{- toYaml $appConfig.applicationSyncPolicy | nindent 8 }}
      {{- else if not $appConfig.disableAutoSync }}
      syncPolicy:
        {{- $namespaceLabels := dict }}
        {{- $namespaceAnnotations := dict }}
        {{- if $.Values.global.namespaceLabels }}
        {{- $namespaceLabels = $.Values.global.namespaceLabels }}
        {{- end }}
        {{- if $.Values.global.namespaceAnnotations }}
        {{- $namespaceAnnotations = $.Values.global.namespaceAnnotations }}
        {{- end }}
        {{- if $appConfig.namespaceLabels }}
        {{- $namespaceLabels = mergeOverwrite $namespaceLabels $appConfig.namespaceLabels }}
        {{- end }}
        {{- if $appConfig.namespaceAnnotations }}
        {{- $namespaceAnnotations = mergeOverwrite $namespaceAnnotations $appConfig.namespaceAnnotations }}
        {{- end }}
        {{- if and (not $namespaceLabels) (not $.Values.global.namespaceLabels) (not $appConfig.namespaceLabels) }}
        {{- $namespaceLabels = dict "secret-inject" "true" }}
        {{- end }}
        {{- if or $namespaceLabels $namespaceAnnotations }}
        managedNamespaceMetadata:
          {{- if $namespaceLabels }}
          labels:
            {{- range $key, $value := $namespaceLabels }}
            {{ $key }}: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- if $namespaceAnnotations }}
          annotations:
            {{- range $key, $value := $namespaceAnnotations }}
            {{ $key }}: {{ $value | quote }}
            {{- end }}
          {{- end }}
        {{- end }}
        automated:
          prune: {{ $appConfig.prune | default true }}
          selfHeal: {{ $appConfig.selfHeal | default true }}
          allowEmpty: {{ $appConfig.allowEmpty | default true }}
        {{- if $appConfig.retry }}
        retry:
          {{- toYaml $appConfig.retry | nindent 10 }}
        {{- end }}
        syncOptions:
          - CreateNamespace={{ $appConfig.createNamespace | default true }}
          {{- if $.Values.global.syncOptions }}
          {{- range $.Values.global.syncOptions }}
          - {{ . }}
          {{- end }}
          {{- end }}
          {{- if $appConfig.syncOptions }}
          {{- range $appConfig.syncOptions }}
          - {{ . }}
          {{- end }}
          {{- end }}
      {{- end }}
      
      sources:
        - repoURL: {{ $appConfig.repoURL | default $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $appConfig.targetRevision | default $.Values.global.source.targetRevision | quote }}
          path: {{ $appConfig.chartPath | default (printf "infra-charts/%s" $appName) | quote }}
          helm:
            releaseName: {{ $appConfig.releaseName | default $appName | quote }}
            {{- if hasKey $appConfig "skipCrds" }}
            skipCrds: {{ $appConfig.skipCrds }}
            {{- end }}
            {{- if hasKey $appConfig "passCredentials" }}
            passCredentials: {{ $appConfig.passCredentials }}
            {{- else }}
            passCredentials: true
            {{- end }}
            valueFiles:
              - values.yaml
              {{- if $appConfig.additionalValueFiles }}
              {{- range $appConfig.additionalValueFiles }}
              - {{ . }}
              {{- end }}
              {{- end }}
              - {{ `$values/app-set/apps/` }}{{ $appName }}/{{ `{{.env}}` }}/values.yaml
            {{- if $appConfig.values }}
            values: |
              {{- include "tpl-values" (dict "values" $appConfig.values "context" $) | nindent 14 }}
            {{- end }}
            {{- if $appConfig.fileParameters }}
            fileParameters:
              {{- toYaml $appConfig.fileParameters | nindent 14 }}
            {{- end }}
            {{- if hasKey $appConfig "ignoreMissingValueFiles" }}
            ignoreMissingValueFiles: {{ $appConfig.ignoreMissingValueFiles }}
            {{- end }}
        - repoURL: {{ $appConfig.valuesRepoURL | default $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $appConfig.valuesTargetRevision | default $.Values.global.source.targetRevision | quote }}
          ref: values
  templatePatch: |
    spec:
      sources:
        - repoURL: {{ $appConfig.repoURL | default $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $appConfig.targetRevision | default $.Values.global.source.targetRevision | quote }}
          path: {{ $appConfig.chartPath | default (printf "infra-charts/%s" $appName) | quote }}
          helm:
            releaseName: {{ $appConfig.releaseName | default $appName | quote }}
            {{- if hasKey $appConfig "passCredentials" }}
            passCredentials: {{ $appConfig.passCredentials }}
            {{- else }}
            passCredentials: true
            {{- end }}
            valueFiles:
              - values.yaml
              {{- if $appConfig.additionalValueFiles }}
              {{- range $appConfig.additionalValueFiles }}
              - {{ . }}
              {{- end }}
              {{- end }}
              - $values/app-set/apps/{{ $appName }}/{{`{{.env}}`}}/values.yaml
            {{`{{- if .helmValues }}`}}
            parameters:
            {{`{{- range $param := .helmValues }}`}}
            - name: {{`{{ $param.name | quote }}`}}
              value: {{`{{ $param.value | quote }}`}}
              forceString: {{ $appConfig.forceString | default true }}
            {{`{{- end }}`}}
            {{- if $appConfig.values }}
            values: |
              {{- include "tpl-values" (dict "values" $appConfig.values "context" $) | nindent 14 }}
            {{- end }}
           {{`{{- end }}`}}
        - repoURL: {{ $appConfig.valuesRepoURL | default $.Values.global.source.repoURL | quote }}
          targetRevision: {{ $appConfig.valuesTargetRevision | default $.Values.global.source.targetRevision | quote }}
          ref: values

{{- end }}
{{- end }}
